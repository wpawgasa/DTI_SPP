/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package dti_sptp;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.Charset;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Administrator
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu3 = new javax.swing.JMenu();
        jPanel1 = new javax.swing.JPanel();
        burnrate1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        pressureExp1 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        density1 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        alphaConst1 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        gastemp1 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        gasconst1 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        heatcap1 = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        heatcap2 = new javax.swing.JTextField();
        burnrate2 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        pressureExp2 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        density2 = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        alphaConst2 = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        gastemp2 = new javax.swing.JTextField();
        gasconst2 = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        throatDia = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        throatLen = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        portDia = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        ignMass = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        ignBurnTime = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();
        numSegment = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        segmentChange = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        guessPSI = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        specificImp = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel28 = new javax.swing.JLabel();
        compareDataFile = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel29 = new javax.swing.JLabel();
        outputPrecision = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        simtime = new javax.swing.JTextField();
        calBtn = new javax.swing.JButton();

        jMenu3.setText("jMenu3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("1st propellant"));

        burnrate1.setText("11");

        jLabel1.setText("Burning rate (m/s)");

        jLabel2.setText("/1000");

        jLabel3.setText("Pressure Exponent");

        pressureExp1.setText("0.48");

        jLabel4.setText("Density (kg/m^3)");

        density1.setText("1.795");

        jLabel5.setText("*1000");

        jLabel6.setText("Alpha erosive burning const.");

        alphaConst1.setText("60");
        alphaConst1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alphaConst1ActionPerformed(evt);
            }
        });

        jLabel7.setText("Gas temperature (K)");

        gastemp1.setText("3500");

        jLabel8.setText("Individual gas const. (J/(kg*K))");

        gasconst1.setText("308");

        jLabel9.setText("Heat Capacity Ratio");

        heatcap1.setText("1.2");

        jLabel19.setText("/10^7");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel6)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel7)
                    .addComponent(jLabel1)
                    .addComponent(jLabel9))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(density1)
                    .addComponent(pressureExp1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(burnrate1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(alphaConst1)
                    .addComponent(gastemp1)
                    .addComponent(gasconst1)
                    .addComponent(heatcap1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5)
                    .addComponent(jLabel19))
                .addGap(69, 69, 69))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(burnrate1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pressureExp1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(density1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(alphaConst1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gastemp1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gasconst1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(heatcap1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("2nd propellant"));

        jLabel10.setText("Burning rate (m/s)");

        heatcap2.setText("1.2");

        burnrate2.setText("13.5");

        jLabel11.setText("/1000");

        jLabel12.setText("Pressure Exponent");

        pressureExp2.setText("0.45");
        pressureExp2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pressureExp2ActionPerformed(evt);
            }
        });

        jLabel13.setText("*1000");

        density2.setText("1.795");

        jLabel14.setText("Density (kg/m^3)");

        jLabel15.setText("Alpha erosive burning const.");

        alphaConst2.setText("60");

        jLabel16.setText("Gas temperature (K)");

        gastemp2.setText("3500");

        gasconst2.setText("308");

        jLabel17.setText("Individual gas const. (J/(kg*K))");

        jLabel18.setText("Heat Capacity Ratio");

        jLabel20.setText("/10^7");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel17)
                    .addComponent(jLabel15)
                    .addComponent(jLabel12)
                    .addComponent(jLabel14)
                    .addComponent(jLabel16)
                    .addComponent(jLabel10)
                    .addComponent(jLabel18))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(density2)
                    .addComponent(pressureExp2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addComponent(burnrate2, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(alphaConst2)
                    .addComponent(gastemp2)
                    .addComponent(gasconst2)
                    .addComponent(heatcap2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(jLabel13)
                    .addComponent(jLabel20))
                .addGap(79, 79, 79))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(burnrate2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pressureExp2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(density2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(alphaConst2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(jLabel20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gastemp2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gasconst2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(heatcap2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18)))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Rocket data"));
        jPanel3.setName("null\n"); // NOI18N

        throatDia.setText("81");
        throatDia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                throatDiaActionPerformed(evt);
            }
        });

        jLabel21.setText("Throat Diameter (mm)");

        jLabel22.setText("Length (m)");

        throatLen.setText("2.2");
        throatLen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                throatLenActionPerformed(evt);
            }
        });

        jLabel27.setText("Port Diameter (mm)");

        portDia.setText("75");

        jLabel31.setText("Igniter Mass (kg)");

        ignMass.setText("0.01");

        jLabel32.setText("Igniter Burn Time (s)");

        ignBurnTime.setText("0.03");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel21)
                    .addComponent(jLabel27)
                    .addComponent(jLabel31))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ignMass)
                    .addComponent(throatDia)
                    .addComponent(portDia))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(throatLen, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel32)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ignBurnTime, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(throatLen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel22))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(throatDia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel21)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel27)
                    .addComponent(portDia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel31)
                    .addComponent(ignMass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel32)
                    .addComponent(ignBurnTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Propellants geo data"));

        jButton3.setText("view&edit propellants' geometric data");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        jLabel23.setText("Number of segments");

        numSegment.setText("40");

        jLabel24.setText("Segment where port changes shape");

        segmentChange.setText("41");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addGap(79, 79, 79))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel23)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(numSegment, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel24)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(segmentChange, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(numSegment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(segmentChange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Calculation parameters"));
        jPanel7.setName("null\n"); // NOI18N

        guessPSI.setText("900");
        guessPSI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guessPSIActionPerformed(evt);
            }
        });

        jLabel25.setText("Guess Pressure (PSI)");

        jLabel26.setText("Specific Impulse (s)");

        specificImp.setText("265");
        specificImp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                specificImpActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel25)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(guessPSI, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel26)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(specificImp, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(specificImp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel26))
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(guessPSI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel25)))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Output Settings"));

        jLabel28.setText("Compare data set");

        jButton1.setText("Browse");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jLabel29.setText("Precision");

        outputPrecision.setText("5");
        outputPrecision.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputPrecisionActionPerformed(evt);
            }
        });

        jLabel30.setText("Simulation time(s)");

        simtime.setText("10");
        simtime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simtimeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel28)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(compareDataFile, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel29)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(outputPrecision, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel30)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(simtime, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(compareDataFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(simtime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel30))
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(outputPrecision, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel29)))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        calBtn.setText("Calculate");
        calBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                calBtnMouseClicked(evt);
            }
        });
        calBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(359, 359, 359)
                        .addComponent(calBtn)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 44, Short.MAX_VALUE))
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(calBtn)
                .addGap(31, 31, 31))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void alphaConst1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alphaConst1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_alphaConst1ActionPerformed

    private void throatDiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_throatDiaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_throatDiaActionPerformed

    private void throatLenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_throatLenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_throatLenActionPerformed

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        // TODO add your handling code here:
        
        propGeoWin.setVisible(true);
    }//GEN-LAST:event_jButton3MouseClicked

    private void guessPSIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guessPSIActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_guessPSIActionPerformed

    private void specificImpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_specificImpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_specificImpActionPerformed

    private void calBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_calBtnActionPerformed

    private void calBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_calBtnMouseClicked
        
        
        
        calThread = new calThread();
        outputWin = new OutputWindow(this);
        if(compareT!=null) {
        for(int i=0;i<compareT.size();i++) {
            outputWin.trace2.addPoint(compareT.get(i),compareThrust.get(i));
        }
        }
        
        
        outputWin.setVisible(true);
        
        
        
        calThread.start();
        
    }//GEN-LAST:event_calBtnMouseClicked

    private void outputPrecisionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputPrecisionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_outputPrecisionActionPerformed

    private void pressureExp2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pressureExp2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pressureExp2ActionPerformed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        FileFilter ff = new FileNameExtensionFilter("Data Files", new String []{"dat","csv"});
        fc.setFileFilter(ff);
        fc.addChoosableFileFilter(ff);
        //fc.setAcceptAllFileFilterUsed(false);
        int retVal = fc.showOpenDialog(fc);
        if(retVal==JFileChooser.APPROVE_OPTION) {
            try {
                File compareFile = fc.getSelectedFile();
                compareDataFile.setText(compareFile.getAbsolutePath());
                InputStream fis;
                BufferedReader br;
                String line;
                fis = new FileInputStream(compareFile);
                br = new BufferedReader(new InputStreamReader(fis, Charset.forName("UTF-8")));
                try {
                    int i = 0;
                    compareT = new ArrayList<Double>();
                    compareThrust = new ArrayList<Double>();
                    while ((line = br.readLine()) != null) {
                        String[] parts = line.split(",", 12);
                        if(i>0) {
                            compareT.add(Double.parseDouble(parts[0]));
                            compareThrust.add(Double.parseDouble(parts[11]));
                            
                        }
                        i++;
                    }
                } catch(IOException ex) {
                    System.out.println(ex.getMessage());
                }
            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }
        } else {
            compareT = null;
            compareThrust = null;
        }
    }//GEN-LAST:event_jButton1MouseClicked

    private void simtimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simtimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_simtimeActionPerformed

    
    /**
     * @param args the command line arguments
     */
    
    public class calThread extends Thread {

        public volatile boolean isAborted = false;
        
        @Override
        public void run() {
            
            // Calculate Thrust profile
            outputWin.abortBtn.setEnabled(true);
            
            double Dt = Double.parseDouble(throatDia.getText())/1000;   //Throat diameter (m)
            double At = (Math.PI)*Math.pow(Dt,2)/4;                     //Throat cross section area (m^2)
            double Lt = Double.parseDouble(throatLen.getText());        //Rocket Length (m)
            double Dp = Double.parseDouble(portDia.getText())/1000;     //Port Diameter (m)
            double D1A = Double.parseDouble(propGeoWin.innerGrainA.getText())/1000; //Inner grain of section A where 2nd propellant start to burnt
            double D1B = Double.parseDouble(propGeoWin.innerGrainB.getText())/1000; //Inner grain of section A where 2nd propellant start to burnt
            int N = Integer.parseInt(numSegment.getText());             //Number of Segment
            int Nch = Integer.parseInt(segmentChange.getText());        //Segment where port starts to change shape
            double Ln = Lt/N;                                           //Segment Length (m)

            //1st Propellant parameters
            double rb0_1 = Double.parseDouble(burnrate1.getText())/1000;//Burn rate of 1st propellant (m/s)
            double n1 = Double.parseDouble(pressureExp1.getText());     //Pressure Exponent
            double rho1 = Double.parseDouble(density1.getText())*1000;  //Density (kg/m^3)
            double alpha1 = Double.parseDouble(alphaConst1.getText())/(Math.pow(10,7));   //Erosive burning constant
            double T1 = Double.parseDouble(gastemp1.getText());         //Gas Temperature (K)
            double R1 = Double.parseDouble(gasconst1.getText());        //Gas Constant (J/(kg*K))
            double gamma1 = Double.parseDouble(heatcap1.getText());     //Heat Capacity Ratio

            //2nd Propellant parameters
            double rb0_2 = Double.parseDouble(burnrate2.getText())/1000;//Burn rate of 2nd propellant (m/s)
            double n2 = Double.parseDouble(pressureExp2.getText());     //Pressure Exponent
            double rho2 = Double.parseDouble(density2.getText())*1000;  //Density (kg/m^3)
            double alpha2 = Double.parseDouble(alphaConst2.getText())/(Math.pow(10,7));   //Erosive burning constant
            double T2 = Double.parseDouble(gastemp2.getText());         //Gas Temperature (K)
            double R2 = Double.parseDouble(gasconst2.getText());        //Gas Constant (J/(kg*K))
            double gamma2 = Double.parseDouble(heatcap2.getText());     //Heat Capacity Ratio


            double Pg = Double.parseDouble(guessPSI.getText())*6895;    //Guess pressure (N/m^2)
            double Isp = Double.parseDouble(specificImp.getText());     //Specific Impulse (s)

            double P0 = 1000*6895;                                      //Reference pressure (N/m^2)
            double a1 = rb0_1/(Math.pow(P0,n1));                        //pre-exponential factor of 1st propellant
            double a2 = rb0_2/(Math.pow(P0,n2));                        //pre-exponential factor of 1st propellant

            double tdelta = 0.01;                                       //time step (s)
            double climit = 0.00001;                                    //convergence limit

            double[] rb1 = new double[N+1];                               //burning rate of the 1st propellant at time t of each segment
            double[] rb2 = new double[N+1];                               //burning rate of the 2nd propellant at time t of each segment

            double[] x1 = new double[N+1];                                //distance burnt of the 1st propellant at time t of each segment
            double[] x2 = new double[N+1];                                //distance burnt of the 2nd propellant at time t of each segment

            double[] Ap = new double[N+1];                               //Port area  at time t of each segment

            double[] Peri1 = new double[N+1];                             //Periphery of the 1st propellant at time t of each segment
            double[] Peri2 = new double[N+1];                             //Periphery of the 2nd propellant at time t of each segment

            double[] rb_m0_1 = new double[N+1];                           //Burning rate at zero mass flow of the 1st propellant at time t of each segment
            double[] rb_m0_2 = new double[N+1];                           //Burning rate at zero mass flow of the 2nd propellant at time t of each segment

            double[] mdot = new double[N+1];                             //Mass flow rate at time t at each segment (kg/s)
            double[] mdotA = new double[N+1];                             //Dummy Mass flow rate at time t at each segment (kg/s)

            double[] mach = new double[N+1];                             //Mach at time t of each segment 
            double[] machA = new double[N+1];                             //dummy mach

            double[] rb1a = new double[N+1];                               //dummy burning rate of the 1st propellant at time t of each segment
            double[] rb2a = new double[N+1];                               //dummy burning rate of the 2nd propellant at time t of each segment

            int precision = Integer.parseInt(outputPrecision.getText());
            double ts = Double.parseDouble(simtime.getText());              //simulation time limit
            double CF = 0;

            //initialize
            double t = 0;                                               //start time (s)
            double tprint = 0;
            double P = Pg;                                              //Set pressure to guess pressure

            for (int i = 0; i <= N; i++) {
                x1[i] = 0;                                              //Set burnt distance to 0
                x2[i] = 0;
                rb1[i] = a1*Math.pow(Pg, n1);                           
                rb2[i] = a2*Math.pow(Pg, n2);
            }
            
            while(!isAborted) {            
                boolean isConverged = false;
                do {  
                   System.out.println(P); 
                   double gas1 = 0;
                   double gas2 = 0;
                   double gasfrac1 = 0;
                   double gasfrac2 = 0;
                   for(int i = 0; i <= N; i++) {
                       //CALC CURRENT PERIPHERIES AND PORT AREAS
                       if(i < Nch) {
                           GeomA(i, x1, x2, Peri1, Peri2, Ap);
                       } else {
                           GeomB(i, x1, x2, Peri1, Peri2, Ap);
                       }
                       //CALC BASE MASS BURN RATE
                       rb_m0_1[i] = a1*Math.pow(P, n1);
                       rb_m0_2[i] = a2*Math.pow(P, n2);
                       //FIND MIXTURE RATIO OF COMBUSTION GAS FROM THE TWO PROPELLANTS
                       gas1 = gas1 + rb1[i]*Peri1[i];
                       gas2 = gas2 + rb2[i]*Peri2[i];
                   }
                   //FIND MIXTURE RATIO OF COMBUSTION GAS FROM THE TWO PROPELLANTS
                   if(gas1==0 && gas2==0) {
                       gasfrac1 = 1;
                       gasfrac2 = 0;
                   } else {
                       gasfrac1 = gas1/(gas1+gas2);
                       gasfrac2 = gas2/(gas1+gas2);
                   }
                   double Rmix = R1*gasfrac1 + R2*gasfrac2;
                   double Tmix = T1*gasfrac1 + T2*gasfrac2;
                   double Gammix = gamma1*gasfrac1 + gamma2*gasfrac2;
                   //calculate m0
                   mdot[0] = IgnitionMassFlow(t);
                   mach[0] = mdot[0]/P/Ap[0]*Math.sqrt(Rmix*Tmix/Gammix);
                   //System.out.println("mdot0: "+mdot[0]+",R:"+Rmix+",T:"+Tmix+",Gam:"+Gammix);
                   double G0 = 0.0;
                   double D0 = 0.0;
                   double B0 = 0.0;
                   if(mdot[0]==0) {
                       rb1[0] = rb_m0_1[0];
                       rb2[0] = rb_m0_2[0];
                   } else {
                       G0 = mdot[0]/Ap[0];
                       D0 = 4*Ap[0]/(Peri1[0]+Peri2[0]);
                       B0 = 53*rb1[0]*rho1/G0;
                       rb1[0] = rb_m0_1[0]+alpha1*(Math.pow(G0, 0.8))*(Math.pow(D0,-0.2))*Math.exp(-1*B0);
                       rb2[0] = rb_m0_2[0]+alpha2*(Math.pow(G0, 0.8))*(Math.pow(D0,-0.2))*Math.exp(-1*B0);
                   }
                   //System.out.println("Ap:"+Ap[0]+"Peri1:"+Peri1[0]+"Peri2:"+Peri2[0]+"G0: "+G0+",B0:"+B0+",D0:"+D0);
                   //System.out.println("rb1_0: "+rb1[0]+",rb2_0:"+rb2[0]+",rbm0_1:"+rb_m0_1[0]+",rbm0_2:"+rb_m0_2[0]);
                   //calculate m1,...,mN
                   double GA = 0.0;
                   double DA = 0.0;
                   double BA1 = 0.0;
                   double BA2 = 0.0;
                   double G = 0.0;
                   double D = 0.0;
                   double B1 = 0.0;
                   double B2 = 0.0;
                   for(int i = 1;i <= N;i++) {
                       if(Peri1[i]+Peri2[i]>0) {
                           // Calculate dummy mass flow rate
                           mdotA[i] = mdot[i-1]+((rb1[i-1]*(Peri1[i-1]+Peri1[i])/2)*Ln*rho1 + (rb2[i-1]*(Peri2[i-1]+Peri2[i])/2)*Ln*rho2);
                           machA[i] = (mdotA[i]/P/Ap[0])*Math.sqrt(Rmix*Tmix/Gammix);
                           GA = mdotA[i]/Ap[i];
                           DA = 4*Ap[i]/(Peri1[i]+Peri2[i]);
                           if(GA==0) {
                               BA1 = Math.pow(10, 11);
                               BA2 = Math.pow(10, 11);
                           } else {
                               BA1 = 53*rb1[i]*rho1/GA;
                               BA2 = 53*rb2[i]*rho2/GA;
                           }
                           // BURNING RATE USING MASS FLOW RATE FROM LAST SEGMENT
                           rb1a[i] = rb_m0_1[i]+alpha1*(Math.pow(GA, 0.8))*(Math.pow(DA,-0.2))*Math.exp(-1*BA1);
                           rb2a[i] = rb_m0_2[i]+alpha2*(Math.pow(GA, 0.8))*(Math.pow(DA,-0.2))*Math.exp(-1*BA2);
                           mdot[i] = mdot[i-1]+(((rb1[i-1]*Peri1[i-1]+rb1a[i]*Peri1[i])/2)*Ln*rho1 + ((rb2[i-1]*Peri2[i-1]+rb2a[i]*Peri2[i])/2)*Ln*rho2);
                           mach[i] = (mdot[i]/P/Ap[0])*Math.sqrt(Rmix*Tmix/Gammix);

                           G = mdot[i]/Ap[i];
                           D = 4*Ap[i]/(Peri1[i]+Peri2[i]);
                           B1 = 53*rb1[i]*rho1/G;
                           B2 = 53*rb2[i]*rho2/G;
                           // correct burning rate
                           rb1[i] = rb_m0_1[i]+alpha1*(Math.pow(G, 0.8))*(Math.pow(D,-0.2))*Math.exp(-1*B1);
                           rb2[i] = rb_m0_2[i]+alpha2*(Math.pow(G, 0.8))*(Math.pow(D,-0.2))*Math.exp(-1*B2);
                       } else {
                           mdotA[i] = mdot[i-1];
                           mdot[i] = mdot[i-1];
                           rb1a[i] = 0;
                           rb2a[i] = 0;
                           rb1[i] = 0;
                           rb2[i] = 0;
                       }
                       //System.out.println("mdotI: "+mdot[i]+",mdotA: "+mdotA[i]+",RBM01: "+rb_m0_1[i]+",RB1A: "+rb1a[i]+",GA: "+GA+",DA: "+DA+",ApI: "+Ap[i]+",peri1I: "+Peri1[i]+",peri2I: "+Peri2[i]+",L: "+Ln);
                   }
                   if(Peri1[0]+Peri2[0]==0) {
                       rb1[0] = 0;
                       rb2[0] = 0;
                   }

                   if(mdot[N]==0) {
                       break;
                   }
                   double k = 2*Math.pow(Gammix,2)/(Gammix-1);
                   double k1 = Math.pow(2/(Gammix+1),(Gammix+1)/(Gammix-1));
                   double k2 = 1-Math.pow(101356.5 / P,(Gammix-1)/Gammix);
                   CF = Math.sqrt(k*k1*k2);
                   //CF = 1.6;
                   double CStar = Isp * 9.80665 / CF;
                   System.out.println("mdotN: "+mdot[N]+", CF: "+CF+", At: "+ At);
                   P = mdot[N] * CStar / At; 
                   if(Math.abs((Pg-P)/P)<climit) {
                       isConverged = true;
                   } else {
                       Pg = P;
                   }

                } while (!isConverged);
                System.out.println("Converged Pressure: "+P); 
                if(mdot[N]==0) {
                    isAborted = true;
                }

                for(int i = 0;i <= N;i++) {
                    x1[i] = x1[i] + rb1[i]*tdelta;
                    if(i < Nch) {
                        if(x1[i] < (D1A-Dt)/2) {
                            x2[i] = 0;
                        } else {
                            x2[i] = x2[i] + rb2[i]*tdelta;
                        }
                    } else {
                        if(x1[i] < (D1B-Dt)/2) {
                            x2[i] = 0;
                        } else {
                            x2[i] = x2[i] + rb2[i]*tdelta;
                        }
                    }
                }

                t = t + tdelta;
                double delta_tprint = 0.01;
                if(t>=tprint) {

                    double out_t = (double)Math.round(tprint*Math.pow(10,precision))/Math.pow(10,precision);
                    double out_x1_head = (double)Math.round(x1[0]*1000*Math.pow(10,precision))/Math.pow(10,precision);
                    double out_x1_mid = (double)Math.round(x1[Math.round(N/2)]*1000*Math.pow(10,precision))/Math.pow(10,precision);
                    double out_x1_tail8 = (double)Math.round(x1[N-8]*1000*Math.pow(10,precision))/Math.pow(10,precision);
                    double out_x1_tail6 = (double)Math.round(x1[N-6]*1000*Math.pow(10,precision))/Math.pow(10,precision);
                    double out_x1_tail4 = (double)Math.round(x1[N-4]*1000*Math.pow(10,precision))/Math.pow(10,precision);
                    double out_x1_tail3 = (double)Math.round(x1[N-3]*1000*Math.pow(10,precision))/Math.pow(10,precision);
                    double out_x1_tail2 = (double)Math.round(x1[N-2]*1000*Math.pow(10,precision))/Math.pow(10,precision);
                    double out_x1_tail1 = (double)Math.round(x1[N-1]*1000*Math.pow(10,precision))/Math.pow(10,precision);
                    double out_x1_tail = (double)Math.round(x1[N]*1000*Math.pow(10,precision))/Math.pow(10,precision);
                    double out_P = (double)Math.round(P/6895);
                    double out_thrust = (double)Math.round(P * At * CF / 9.8 * 2.204*Math.pow(10,precision))/Math.pow(10,precision);
                    //double out_thrust = (double)Math.round(P * At * CF * Math.pow(10,precision))/Math.pow(10,precision);
                    DefaultTableModel outTableModel = (DefaultTableModel) outputWin.outputTable.getModel();
                    outTableModel.addRow(new Object[]{out_t,out_x1_head,out_x1_mid,out_x1_tail8,out_x1_tail6,out_x1_tail4,out_x1_tail3,out_x1_tail2,out_x1_tail1,out_x1_tail,out_P,out_thrust});
                    outputWin.trace.addPoint(tprint, out_thrust);
                    outputWin.trace3.addPoint(tprint, out_P);
                    tprint = tprint + delta_tprint;
                }

                //P < 50 * 6895
                if(t>delta_tprint && (P < 50 * 6895 || t >= ts)) {
                    isAborted = true;
                }

            };
        
            outputWin.saveOutputBtn.setEnabled(true);
            outputWin.abortBtn.setEnabled(false);
        }
        
        private double IgnitionMassFlow(double T) {
        
        //double Tig = 0.03;        //igniter burn time (s)
        //double Mig = 0.01;          //igniter mass (kg)
        
            double Tig = Double.parseDouble(ignBurnTime.getText());
            double Mig = Double.parseDouble(ignMass.getText());
        if(T<=Tig) {
            return Mig/Tig;
        }  else {
            return 0;
        }       
    }
    
        private void GeomA(int idx, double [] x1, double [] x2, double [] Peri1, double [] Peri2, double [] Ap) {

            DefaultTableModel table1 = (DefaultTableModel) propGeoWin.jTable1.getModel();
            DefaultTableModel table2 = (DefaultTableModel) propGeoWin.jTable2.getModel();
            int numrows = Integer.parseInt(propGeoWin.numrowsA.getText());
            int rows1 = table1.getRowCount();
            int rows2 = table2.getRowCount();
            double [] x1d = new double[numrows+1];
            double [] x2d = new double[numrows+1];
            double [] peri1d = new double[numrows+1];
            double [] peri2d = new double[numrows+1];
            double ap1 = 0;
            double ap2 = 0;
            double [] ap1d = new double[numrows+1];
            double [] ap2d = new double[numrows+1];
            for(int i=0;i<=numrows;i++) {
                if(i<rows1) {
                    x1d[i] = (Double) table1.getValueAt(i, 0)/1000;
                    peri1d[i] = (Double) table1.getValueAt(i, 2)/1000;
                    ap1d[i] = (Double) table1.getValueAt(i, 1)/1000000;
                } else {
                    x1d[i] = 0.0;
                    peri1d[i] = 0;
                    ap1d[i] = 0;
                }
                if(i<rows2) {
                    x2d[i] = (Double) table2.getValueAt(i, 0)/1000;
                    peri2d[i] = (Double) table2.getValueAt(i, 2)/1000;
                    ap2d[i] = (Double) table2.getValueAt(i, 1)/1000000;
                } else {
                    x2d[i] = 0;
                    peri2d[i] = 0;
                    ap2d[i] = 0;
                }
            }

            for(int i=0;i<numrows;i++) {
                if(x1[idx]>=x1d[i] && x1[idx]<x1d[i+1]) {
                    ap1 = ap1d[i]+(ap1d[i+1]-ap1d[i])/(x1d[i+1]-x1d[i])*(x1[idx]-x1d[i]);
                    Ap[idx] = ap1;
                    Peri1[idx] = peri1d[i]+(peri1d[i+1]-peri1d[i])/(x1d[i+1]-x1d[i])*(x1[idx]-x1d[i]);
                }
            }
            for(int i=0;i<numrows;i++) {
                if(x2[idx]>=x2d[i] && x2[idx]<x2d[i+1]) {
                    ap2 = ap2d[i]+(ap2d[i+1]-ap1d[i])/(x2d[i+1]-x2d[i])*(x2[idx]-x2d[i]);
                    Ap[idx] = ap1+ap2;
                    Peri2[idx] = peri2d[i]+(peri2d[i+1]-peri2d[i])/(x2d[i+1]-x2d[i])*(x2[idx]-x2d[i]);
                }
            }

            if(x1[idx] >= Double.parseDouble(propGeoWin.maxBurntD1_A.getText())) {
                Ap[idx] = Double.parseDouble(propGeoWin.finalAP_A.getText());
                Peri1[idx] = Double.parseDouble(propGeoWin.finalPeri_A.getText());
            }





        }

        private void GeomB(int idx, double [] x1, double [] x2, double [] Peri1, double [] Peri2, double [] Ap) {

            DefaultTableModel table1 = (DefaultTableModel) propGeoWin.jTable3.getModel();
            DefaultTableModel table2 = (DefaultTableModel) propGeoWin.jTable4.getModel();
            int numrows = Integer.parseInt(propGeoWin.numrowsB.getText());
            int rows1 = table1.getRowCount();
            int rows2 = table2.getRowCount();
            double [] x1d = new double[numrows+1];
            double [] x2d = new double[numrows+1];
            double [] peri1d = new double[numrows+1];
            double [] peri2d = new double[numrows+1];
            double ap1 = 0;
            double ap2 = 0;
            double [] ap1d = new double[numrows+1];
            double [] ap2d = new double[numrows+1];
            for(int i=0;i<=numrows;i++) {
                if(i<rows1) {
                    x1d[i] = (Double) table1.getValueAt(i, 0)/1000;
                    peri1d[i] = (Double) table1.getValueAt(i, 2)/1000;
                    ap1d[i] = (Double) table1.getValueAt(i, 1)/1000000;
                } else {
                    x1d[i] = 0;
                    peri1d[i] = 0;
                    ap1d[i] = 0;
                }
                if(i<rows2) {
                    x2d[i] = (Double) table2.getValueAt(i, 0)/1000;
                    peri2d[i] = (Double) table2.getValueAt(i, 2)/1000;
                    ap2d[i] = (Double) table2.getValueAt(i, 1)/1000000;
                } else {
                    x2d[i] = 0;
                    peri2d[i] = 0;
                    ap2d[i] = 0;
                }
            }

            for(int i=0;i<numrows;i++) {
                if(x1[idx]>=x1d[i] && x1[idx]<x1d[i+1]) {
                    ap1 = ap1d[i]+(ap1d[i+1]-ap1d[i])/(x1d[i+1]-x1d[i])*(x1[idx]-x1d[i]);
                    Ap[idx] = ap1;
                    Peri1[idx] = peri1d[i]+(peri1d[i+1]-peri1d[i])/(x1d[i+1]-x1d[i])*(x1[idx]-x1d[i]);
                }
            }
            for(int i=0;i<numrows;i++) {
                if(x2[idx]>=x2d[i] && x2[idx]<x2d[i+1]) {
                    ap2 = ap2d[i]+(ap2d[i+1]-ap1d[i])/(x2d[i+1]-x2d[i])*(x2[idx]-x2d[i]);
                    Ap[idx] = ap1+ap2;
                    Peri2[idx] = peri2d[i]+(peri2d[i+1]-peri2d[i])/(x2d[i+1]-x2d[i])*(x2[idx]-x2d[i]);
                }
            }

            if(x1[idx] >= Double.parseDouble(propGeoWin.maxBurntD1_B.getText())) {
                Ap[idx] = Double.parseDouble(propGeoWin.finalAP_B.getText());
                Peri1[idx] = Double.parseDouble(propGeoWin.finalPeri_B.getText());
            }





        }
        
        public void kill() {
            isAborted = true;
        }
        
    
    }
    
    public void killThread() {
        calThread.kill();
    }
    private final PropGeoWindow propGeoWin = new PropGeoWindow();
    private OutputWindow outputWin;
    private ArrayList<Double> compareT;
    private ArrayList<Double> compareThrust;
    public calThread calThread;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTextField alphaConst1;
    public javax.swing.JTextField alphaConst2;
    public javax.swing.JTextField burnrate1;
    public javax.swing.JTextField burnrate2;
    private javax.swing.JButton calBtn;
    private javax.swing.JTextField compareDataFile;
    public javax.swing.JTextField density1;
    public javax.swing.JTextField density2;
    public javax.swing.JTextField gasconst1;
    public javax.swing.JTextField gasconst2;
    public javax.swing.JTextField gastemp1;
    public javax.swing.JTextField gastemp2;
    public javax.swing.JTextField guessPSI;
    public javax.swing.JTextField heatcap1;
    public javax.swing.JTextField heatcap2;
    public javax.swing.JTextField ignBurnTime;
    public javax.swing.JTextField ignMass;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    public javax.swing.JTextField numSegment;
    public javax.swing.JTextField outputPrecision;
    public javax.swing.JTextField portDia;
    public javax.swing.JTextField pressureExp1;
    public javax.swing.JTextField pressureExp2;
    public javax.swing.JTextField segmentChange;
    public javax.swing.JTextField simtime;
    public javax.swing.JTextField specificImp;
    public javax.swing.JTextField throatDia;
    public javax.swing.JTextField throatLen;
    // End of variables declaration//GEN-END:variables
}
